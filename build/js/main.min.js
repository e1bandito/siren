/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/svgxuse/svgxuse.js":
/*!*****************************************!*\
  !*** ./node_modules/svgxuse/svgxuse.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*!\n * @copyright Copyright (c) 2017 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.2.6\n */\n\n/*jslint browser: true */\n\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n  \"use strict\";\n\n  if (typeof window !== \"undefined\" && window.addEventListener) {\n    var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n\n    var checkUseElems;\n    var tid; // timeout id\n\n    var debouncedCheck = function () {\n      clearTimeout(tid);\n      tid = setTimeout(checkUseElems, 100);\n    };\n\n    var unobserveChanges = function () {\n      return;\n    };\n\n    var observeChanges = function () {\n      var observer;\n      window.addEventListener(\"resize\", debouncedCheck, false);\n      window.addEventListener(\"orientationchange\", debouncedCheck, false);\n\n      if (window.MutationObserver) {\n        observer = new MutationObserver(debouncedCheck);\n        observer.observe(document.documentElement, {\n          childList: true,\n          subtree: true,\n          attributes: true\n        });\n\n        unobserveChanges = function () {\n          try {\n            observer.disconnect();\n            window.removeEventListener(\"resize\", debouncedCheck, false);\n            window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n          } catch (ignore) {}\n        };\n      } else {\n        document.documentElement.addEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n\n        unobserveChanges = function () {\n          document.documentElement.removeEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n          window.removeEventListener(\"resize\", debouncedCheck, false);\n          window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n        };\n      }\n    };\n\n    var createRequest = function (url) {\n      // In IE 9, cross origin requests can only be sent using XDomainRequest.\n      // XDomainRequest would fail if CORS headers are not set.\n      // Therefore, XDomainRequest should only be used with cross origin requests.\n      function getOrigin(loc) {\n        var a;\n\n        if (loc.protocol !== undefined) {\n          a = loc;\n        } else {\n          a = document.createElement(\"a\");\n          a.href = loc;\n        }\n\n        return a.protocol.replace(/:/g, \"\") + a.host;\n      }\n\n      var Request;\n      var origin;\n      var origin2;\n\n      if (window.XMLHttpRequest) {\n        Request = new XMLHttpRequest();\n        origin = getOrigin(location);\n        origin2 = getOrigin(url);\n\n        if (Request.withCredentials === undefined && origin2 !== \"\" && origin2 !== origin) {\n          Request = XDomainRequest || undefined;\n        } else {\n          Request = XMLHttpRequest;\n        }\n      }\n\n      return Request;\n    };\n\n    var xlinkNS = \"http://www.w3.org/1999/xlink\";\n\n    checkUseElems = function () {\n      var base;\n      var bcr;\n      var fallback = \"\"; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n\n      var hash;\n      var href;\n      var i;\n      var inProgressCount = 0;\n      var isHidden;\n      var Request;\n      var url;\n      var uses;\n      var xhr;\n\n      function observeIfDone() {\n        // If done with making changes, start watching for chagnes in DOM again\n        inProgressCount -= 1;\n\n        if (inProgressCount === 0) {\n          // if all xhrs were resolved\n          unobserveChanges(); // make sure to remove old handlers\n\n          observeChanges(); // watch for changes to DOM\n        }\n      }\n\n      function attrUpdateFunc(spec) {\n        return function () {\n          if (cache[spec.base] !== true) {\n            spec.useEl.setAttributeNS(xlinkNS, \"xlink:href\", \"#\" + spec.hash);\n\n            if (spec.useEl.hasAttribute(\"href\")) {\n              spec.useEl.setAttribute(\"href\", \"#\" + spec.hash);\n            }\n          }\n        };\n      }\n\n      function onloadFunc(xhr) {\n        return function () {\n          var body = document.body;\n          var x = document.createElement(\"x\");\n          var svg;\n          xhr.onload = null;\n          x.innerHTML = xhr.responseText;\n          svg = x.getElementsByTagName(\"svg\")[0];\n\n          if (svg) {\n            svg.setAttribute(\"aria-hidden\", \"true\");\n            svg.style.position = \"absolute\";\n            svg.style.width = 0;\n            svg.style.height = 0;\n            svg.style.overflow = \"hidden\";\n            body.insertBefore(svg, body.firstChild);\n          }\n\n          observeIfDone();\n        };\n      }\n\n      function onErrorTimeout(xhr) {\n        return function () {\n          xhr.onerror = null;\n          xhr.ontimeout = null;\n          observeIfDone();\n        };\n      }\n\n      unobserveChanges(); // stop watching for changes to DOM\n      // find all use elements\n\n      uses = document.getElementsByTagName(\"use\");\n\n      for (i = 0; i < uses.length; i += 1) {\n        try {\n          bcr = uses[i].getBoundingClientRect();\n        } catch (ignore) {\n          // failed to get bounding rectangle of the use element\n          bcr = false;\n        }\n\n        href = uses[i].getAttribute(\"href\") || uses[i].getAttributeNS(xlinkNS, \"href\") || uses[i].getAttribute(\"xlink:href\");\n\n        if (href && href.split) {\n          url = href.split(\"#\");\n        } else {\n          url = [\"\", \"\"];\n        }\n\n        base = url[0];\n        hash = url[1];\n        isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n\n        if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n          // the use element is empty\n          // if there is a reference to an external SVG, try to fetch it\n          // use the optional fallback URL if there is no reference to an external SVG\n          if (fallback && !base.length && hash && !document.getElementById(hash)) {\n            base = fallback;\n          }\n\n          if (uses[i].hasAttribute(\"href\")) {\n            uses[i].setAttributeNS(xlinkNS, \"xlink:href\", href);\n          }\n\n          if (base.length) {\n            // schedule updating xlink:href\n            xhr = cache[base];\n\n            if (xhr !== true) {\n              // true signifies that prepending the SVG was not required\n              setTimeout(attrUpdateFunc({\n                useEl: uses[i],\n                base: base,\n                hash: hash\n              }), 0);\n            }\n\n            if (xhr === undefined) {\n              Request = createRequest(base);\n\n              if (Request !== undefined) {\n                xhr = new Request();\n                cache[base] = xhr;\n                xhr.onload = onloadFunc(xhr);\n                xhr.onerror = onErrorTimeout(xhr);\n                xhr.ontimeout = onErrorTimeout(xhr);\n                xhr.open(\"GET\", base);\n                xhr.send();\n                inProgressCount += 1;\n              }\n            }\n          }\n        } else {\n          if (!isHidden) {\n            if (cache[base] === undefined) {\n              // remember this URL if the use element was not empty and no request was sent\n              cache[base] = true;\n            } else if (cache[base].onload) {\n              // if it turns out that prepending the SVG is not necessary,\n              // abort the in-progress xhr.\n              cache[base].abort();\n              delete cache[base].onload;\n              cache[base] = true;\n            }\n          } else if (base.length && cache[base]) {\n            setTimeout(attrUpdateFunc({\n              useEl: uses[i],\n              base: base,\n              hash: hash\n            }), 0);\n          }\n        }\n      }\n\n      uses = \"\";\n      inProgressCount += 1;\n      observeIfDone();\n    };\n\n    var winLoad;\n\n    winLoad = function () {\n      window.removeEventListener(\"load\", winLoad, false); // to prevent memory leaks\n\n      tid = setTimeout(checkUseElems, 0);\n    };\n\n    if (document.readyState !== \"complete\") {\n      // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n      window.addEventListener(\"load\", winLoad, false);\n    } else {\n      // No need to add a listener if the document is already loaded, initialize immediately.\n      winLoad();\n    }\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/svgxuse/svgxuse.js\n");

/***/ }),

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var svgxuse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svgxuse */ \"./node_modules/svgxuse/svgxuse.js\");\n/* harmony import */ var svgxuse__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(svgxuse__WEBPACK_IMPORTED_MODULE_0__);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaW5kZXguanM/N2JhNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUEiLCJmaWxlIjoiLi9zcmMvanMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3ZneHVzZSBmcm9tICdzdmd4dXNlJztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/index.js\n");

/***/ })

/******/ });